name: Update Lessons Content

on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '22'
  CONTENT_REPO: 'ByByte-diy/ByByteLessons'
  CONTENT_BRANCH: 'main'

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get current content hash
        id: current-hash
        run: |
          if [ -f "src/assets/content/index.json" ]; then
            CURRENT_HASH=$(git log -1 --format="%H" -- src/assets/content/ || echo "no-content")
          else
            CURRENT_HASH="no-content"
          fi
          echo "current_hash=$CURRENT_HASH" >> $GITHUB_OUTPUT

      - name: Get latest content from source repo
        id: latest-content
        run: |
          echo "Fetching latest content from ${{ env.CONTENT_REPO }}..."
          mkdir -p temp-lessons
          curl -L -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ env.CONTENT_REPO }}/zipball/${{ env.CONTENT_BRANCH }}" \
            -o lessons.zip
          unzip lessons.zip -d temp-lessons
          
          # Знаходимо кореневу папку репозиторію
          REPO_DIR=$(find temp-lessons -maxdepth 1 -type d -name "ByByte-diy-ByByteLessons-*" | head -1)
          if [ -d "$REPO_DIR/content" ]; then
            # Отримуємо хеш останнього коміту з репозиторію контенту
            LATEST_HASH=$(curl -s -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ env.CONTENT_REPO }}/commits/${{ env.CONTENT_BRANCH }}" | \
              jq -r '.sha')
            echo "latest_hash=$LATEST_HASH" >> $GITHUB_OUTPUT
            echo "content_available=true" >> $GITHUB_OUTPUT
          else
            echo "content_available=false" >> $GITHUB_OUTPUT
            echo "latest_hash=${{ steps.current-hash.outputs.current_hash }}" >> $GITHUB_OUTPUT
          fi

      - name: Check if update is needed
        id: update-check
        run: |
          if [ "${{ steps.latest-content.outputs.content_available }}" = "true" ]; then
            if [ "${{ steps.current-hash.outputs.current_hash }}" != "${{ steps.latest-content.outputs.latest_hash }}" ] || [ "${{ github.event.inputs.force_update }}" = "true" ]; then
              echo "update_needed=true" >> $GITHUB_OUTPUT
              echo "Update needed: current=${{ steps.current-hash.outputs.current_hash }}, latest=${{ steps.latest-content.outputs.latest_hash }}"
            else
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "No updates needed"
            fi
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "Content not available"
          fi

      - name: Update content
        if: steps.update-check.outputs.update_needed == 'true'
        run: |
          echo "Updating content..."
          REPO_DIR=$(find temp-lessons -maxdepth 1 -type d -name "ByByte-diy-ByByteLessons-*" | head -1)
          cp -r "$REPO_DIR/content"/* src/assets/content/
          echo "Content updated successfully"

      - name: Generate lessons index
        if: steps.update-check.outputs.update_needed == 'true'
        run: |
          echo "Generating lessons index..."
          node scripts/generate-index.js

      - name: Validate content
        if: steps.update-check.outputs.update_needed == 'true'
        run: |
          echo "Validating content..."
          node scripts/validate-content.js

      - name: Commit and push changes
        if: steps.update-check.outputs.update_needed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/assets/content/
          git commit -m "chore: update lessons content from ${{ env.CONTENT_REPO }}

          - Updated content hash: ${{ steps.latest-content.outputs.latest_hash }}
          - Previous hash: ${{ steps.current-hash.outputs.current_hash }}
          - Auto-generated by update-content workflow"
          git push

      - name: Trigger CI/CD
        if: steps.update-check.outputs.update_needed == 'true'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: content-updated
          client-payload: '{"content_hash": "${{ steps.latest-content.outputs.latest_hash }}"}'

      - name: Create issue if content update failed
        if: steps.latest-content.outputs.content_available == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚠️ Content update failed',
              body: `Failed to fetch content from ${{ env.CONTENT_REPO }}. Please check the source repository.`,
              labels: ['bug', 'content']
            })
